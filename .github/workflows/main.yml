
name: DeployPipeline

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest
  build:
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build Image
        run: |
          docker build . --file Dockerfile --tag scottkurt/demo:TestApp-2.0
          docker save -o pythonapp.tar scottkurt/demo:TestApp-2.0
          mv pythonapp.tar /tmp/pythonapp.tar
      - uses: actions/upload-artifact@master
        with:
          name: pythonapp
          path: /tmp/pythonapp.tar
  deploy:
    needs: 
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@master
        with:
          name: pythonapp
          path: /tmp/pythonapp.tar
      - name: Deploy To Registry
        run: |
          echo "${{ secrets.dockerpw }}" | docker login -u "scottkurt" --password-stdin
          docker push scottkurt/demo:TestApp-2.0
